dataSCW
time
#### Daily consumption rate ####
# Dataset
dataSCW <- read.csv("SourceData_ConsumptionRate_SCW.csv", header = T)
dataWT <- read.csv("SourceData_ConsumptionRate_WT.csv", header = T)
# MCMC sampling
# Parameters
time <- unique(dataSCW$time)
#### Daily consumption rate ####
# Dataset
dataSCW <- read.csv("SourceData_ConsumptionRate_SCW.csv", header = T)
dataWT <- read.csv("SourceData_ConsumptionRate_WT.csv", header = T)
# MCMC sampling
# Parameters
time <- unique(dataSCW$time)
timing <- unique(dataSCW$timing)
category <- c("aqua_total","cricket_total")  # <- total or aqua_total or cricket_total
randomDraws <- 1000
# Object
fit <- list()
listnames <- NULL
n <- 1
x = 1
i = 1
t = 1
## Count
print(paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1]))
## parameter 1 - initial weight in trout stomach
dataS0 <- dataSCW %>%
filter(Time == time[t], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
dataSCW
time[t]
x = 1
i = 1
t = 1
## Count
print(paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1]))
## parameter 1 - initial weight in trout stomach
dataS0 <- dataSCW %>%
filter(Time == time[t], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
t = 1
t
time[t]
# MCMC sampling
# Parameters
time <- unique(dataSCW$Time)
timing <- unique(dataSCW$Timing)
category <- c("aqua_total","cricket_total")  # <- total or aqua_total or cricket_total
randomDraws <- 1000
# Object
fit <- list()
listnames <- NULL
n <- 1
# Start
for (x in 1:length(category)) {
for (i in 1:length(timing)) {
for (t in 1:(length(time)-1)) {
x = 1
i = 1
t = 1
## Count
print(paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1]))
## parameter 1 - initial weight in trout stomach
dataS0 <- dataSCW %>%
filter(Time == time[t], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
# Table with mean, SD, and sample size
tableS0 <- data.frame(
s0_mean = mean(dataS0),  # 1匹あたりの体重 (g)
s0_sd = sd(dataS0),   # 1匹あたりの体重のSD
s0_n = length(dataS0)         # サンプルサイズ (1匹あたり体重)
)
if(mean(dataS0)>0){
# SE
tableS0$s0_se <- tableS0$s0_sd / sqrt(tableS0$s0_n)
# Parameters for Bayesian model
mu_prior <- tableS0$s0_mean
sigma_prior <- tableS0$s0_sd
# Bayesian model
modelS0 <- brm(
s0_mean | se(s0_se) ~ 1,
data = tableS0,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelS0))
print(plot(modelS0))
# 統合推定値の抽出
posteriorS0 <- as_draws_df(modelS0)$b_Intercept
# 事後分布からX回のランダムサンプリング
posteriorRandomS0 <- posterior_predict(modelS0, ndraws = randomDraws)
}else{
posteriorRandomS0 <- rep(0,randomDraws)
}
## parameter 2 - weight in trout stomach after t hours
dataSt <- dataSCW %>%
filter(Time == time[1+1], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
# Table with mean, SD, and sample size
tableSt <- data.frame(
st_mean = mean(dataSt),  # 1匹あたりの体重 (g)
st_sd = sd(dataSt),   # 1匹あたりの体重のSD
st_n = length(dataSt)         # サンプルサイズ (1匹あたり体重)
)
if(mean(dataSt)>0){
# SE
tableSt$st_se <- tableSt$st_sd / sqrt(tableSt$st_n)
# Parameters for Bayesian model
mu_prior <- tableSt$st_mean
sigma_prior <- tableSt$st_sd
# Bayesian model
modelSt <- brm(
st_mean | se(st_se) ~ 1,
data = tableSt,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelSt))
print(plot(modelSt))
# 統合推定値の抽出
posteriorSt <- as_draws_df(modelSt)$b_Intercept
# 事後分布からX回のランダムサンプリング
posteriorRandomSt <- posterior_predict(modelSt, ndraws = randomDraws)
}else{
posteriorRandomSt <- rep(0,randomDraws)
}
## Calculate ##
WT <- dataWT %>%
filter(Time == time[t+1]) %>%
pull(Temperature) %>%
as.numeric()
Rt <- exp(0.224*WT-5.44)
# Fit model
fit[[n]] <- (posteriorRandomSt - posteriorRandomS0*exp(-Rt))*Rt/(1-exp(-Rt))
listnames[n] <- paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1])
n <- n+1
}
}
}
x = 1
i = 1
t = 1
## Count
print(paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1]))
## parameter 1 - initial weight in trout stomach
dataS0 <- dataSCW %>%
filter(Time == time[t], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
dataS0
## parameter 2 - weight in trout stomach after t hours
dataSt <- dataSCW %>%
filter(Time == time[1+1], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
dataSt
## parameter 2 - weight in trout stomach after t hours
dataSt <- dataSCW %>%
filter(Time == time[t+1], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
dataSt
#### Daily consumption rate ####
# Dataset
dataSCW <- read.csv("SourceData_ConsumptionRate_SCW.csv", header = T)
dataWT <- read.csv("SourceData_ConsumptionRate_WT.csv", header = T)
# MCMC sampling
# Parameters
time <- unique(dataSCW$Time)
timing <- unique(dataSCW$Timing)
category <- c("aqua_total","cricket_total")  # <- total or aqua_total or cricket_total
randomDraws <- 1000
# Object
fit <- list()
listnames <- NULL
n <- 1
# Start
for (x in 1:length(category)) {
for (i in 1:length(timing)) {
for (t in 1:(length(time)-1)) {
## Count
print(paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1]))
## parameter 1 - initial weight in trout stomach
dataS0 <- dataSCW %>%
filter(Time == time[t], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
# Table with mean, SD, and sample size
tableS0 <- data.frame(
s0_mean = mean(dataS0),  # 1匹あたりの体重 (g)
s0_sd = sd(dataS0),   # 1匹あたりの体重のSD
s0_n = length(dataS0)         # サンプルサイズ (1匹あたり体重)
)
if(mean(dataS0)>0){
# SE
tableS0$s0_se <- tableS0$s0_sd / sqrt(tableS0$s0_n)
# Parameters for Bayesian model
mu_prior <- tableS0$s0_mean
sigma_prior <- tableS0$s0_sd
# Bayesian model
modelS0 <- brm(
s0_mean | se(s0_se) ~ 1,
data = tableS0,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelS0))
print(plot(modelS0))
# 統合推定値の抽出
posteriorS0 <- as_draws_df(modelS0)$b_Intercept
# 事後分布からX回のランダムサンプリング
posteriorRandomS0 <- posterior_predict(modelS0, ndraws = randomDraws)
}else{
posteriorRandomS0 <- rep(0,randomDraws)
}
## parameter 2 - weight in trout stomach after t hours
dataSt <- dataSCW %>%
filter(Time == time[t+1], Timing == timing[i]) %>%
pull(category[x]) %>%
as.numeric()
# Table with mean, SD, and sample size
tableSt <- data.frame(
st_mean = mean(dataSt),  # 1匹あたりの体重 (g)
st_sd = sd(dataSt),   # 1匹あたりの体重のSD
st_n = length(dataSt)         # サンプルサイズ (1匹あたり体重)
)
if(mean(dataSt)>0){
# SE
tableSt$st_se <- tableSt$st_sd / sqrt(tableSt$st_n)
# Parameters for Bayesian model
mu_prior <- tableSt$st_mean
sigma_prior <- tableSt$st_sd
# Bayesian model
modelSt <- brm(
st_mean | se(st_se) ~ 1,
data = tableSt,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelSt))
print(plot(modelSt))
# 統合推定値の抽出
posteriorSt <- as_draws_df(modelSt)$b_Intercept
# 事後分布からX回のランダムサンプリング
posteriorRandomSt <- posterior_predict(modelSt, ndraws = randomDraws)
}else{
posteriorRandomSt <- rep(0,randomDraws)
}
## Calculate ##
WT <- dataWT %>%
filter(Time == time[t+1]) %>%
pull(Temperature) %>%
as.numeric()
Rt <- exp(0.224*WT-5.44)
# Fit model
fit[[n]] <- (posteriorRandomSt - posteriorRandomS0*exp(-Rt))*Rt/(1-exp(-Rt))
listnames[n] <- paste0(category[x],"_",timing[i],"_",time[t],"_",time[t+1])
n <- n+1
}
}
}
names(fit) <- listnames
dataCR <- data.frame(
fit_aqua_temp1 = Reduce("+", fit[1:5]),
fit_aqua_temp2 = Reduce("+", fit[6:10]),
fit_cricket_temp1 = Reduce("+", fit[11:15])*0.95,
fit_cricket_temp2 = Reduce("+", fit[16:20])*0.95
)
lapply(dataCR, mean)
lapply(dataCR, quantile)
#### Merged data set of EPA content ####
mergedPosteriorRandomFA1D
mergedPosteriorRandomFA1D <- data.frame(aqua = posteriorRandomFaAquaAll$random.fa_per_weight,
cricket = posteriorRandomFaCricket$random.fa_per_weight)
#### Calculate daily EPA intake (DEI) ####
# Parameters
fishMassPer100m <- 155529.0
# Calculate
dataDEI <- data.frame(dataCR[1:2]*mergedPosteriorRandomFA1D$aqua*fishMassPer100m*10^-3,
dataCR[3:4]*mergedPosteriorRandomFA1D$cricket*fishMassPer100m*10^-3)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(stringr)
library(brms)
library(forcats)
library(purrr)
## Order level ##
# 水生昆虫 体重あたりの脂肪酸量
dataEpaAqua <- read.csv("SourceData_EPAcont_Aqua.csv", header = T)
# Parameters
randomDraws <- 1000
idOrder <- unique(dataEpaAqua$order)
# Objects
posteriorFaAqua <- list()
posteriorRandomFaAqua <- list()
# Parameters
randomDraws <- 1000
# Start
dataF <- dataEpaAqua
dataF$group <- c(1:length(dataF$Reference))
## fa per weight
# Data frame
dataFA <- data.frame(
study = dataF$group,
fa_mean = dataF$EPAmg.g_dw_mean,    # 体重あたり脂肪酸量 (mg/g)
fa_sd = dataF$EPAmg.g_dw_sd,    # 体重あたり脂肪酸量のSD
fa_n = dataF$Sample.size      # サンプルサイズ (体重あたり脂肪酸量)
)
# 体重あたり脂肪酸量の標準誤差（SE）を計算
dataFA$fa_se <- dataFA$fa_sd / sqrt(dataFA$fa_n)
# Prior
mu_prior <- mean(dataFA$fa_mean)
sigma_prior <- sd(dataFA$fa_mean)
# ベイズモデルの定義
modelFaAquaAll <- brm(
fa_mean | se(fa_se) ~ 1 + (1 | study),  # ランダム効果モデル
data = dataFA,
family = gaussian(),
prior = c(
prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"), # 事前分布（仮）
prior(cauchy(0,0.3), class = "sd")
),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelFaAquaAll))
print(plot(modelFaAquaAll))
# 統合推定値の抽出
posteriorFA <- as_draws_df(modelFaAquaAll)$b_Intercept
# 統合推定値の保存
posteriorFaAquaAll <- data.frame(
post.fa_per_weight = posteriorFA,
order = rep("Cricket",length(8000*4))
)
# 事後分布からX回のランダムサンプリング
posteriorRandomFA <- sample(posteriorFA, randomDraws)
posteriorRandomFaAquaAll <- data.frame(
random.fa_per_weight = posteriorRandomFA,
order = rep("Aqua",length(randomDraws))
)
#### EPA content of camel crickets ####
# カマドウマ 体重あたりの脂肪酸量
dataEpaCricket <- read.csv("SourceData_EPAcont_Cricket.csv", header = T)
# Parameters
randomDraws <- 1000
dataFA <- data.frame(
fa_mean = mean(dataEpaCricket$EPA..mg.g.in.dry.weight.),    # 体重あたり脂肪酸量 (mg/g)
fa_sd = sd(dataEpaCricket$EPA..mg.g.in.dry.weight.),    # 体重あたり脂肪酸量のSD
fa_n = length(dataEpaCricket$EPA..mg.g.in.dry.weight.)      # サンプルサイズ (体重あたり脂肪酸量)
)
# SE
dataFA$fa_se <- dataFA$fa_sd / sqrt(dataFA$fa_n)
# Prior
mu_prior <- mean(dataEpaCricket$EPA..mg.g.in.dry.weight.)
sigma_prior <- sd(dataEpaCricket$EPA..mg.g.in.dry.weight.)
# ベイズモデルの定義
modelFaCricket <- brm(
fa_mean | se(fa_se) ~ 1,
data = dataFA,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
print(summary(modelFaCricket))
print(plot(modelFaCricket))
# 統合推定値の抽出
posteriorFA <- as_draws_df(modelFaCricket)$b_Intercept
## 統合推定値の保存
posteriorFaCricket <- data.frame(
post.fa_per_weight = posteriorFA,
order = rep("Cricket",length(8000*4))
)
# 事後分布からX回のランダムサンプリング
posteriorRandomFA <- posterior_predict(modelFaCricket, ndraws = randomDraws)
posteriorRandomFaCricket <- data.frame(
random.fa_per_weight = posteriorRandomFA,
order = rep("Cricket",length(randomDraws))
)
mergedPosteriorRandomFA1D <- data.frame(aqua = posteriorRandomFaAquaAll$random.fa_per_weight,
cricket = posteriorRandomFaCricket$random.fa_per_weight)
#### Calculate daily EPA intake (DEI) ####
# Parameters
fishMassPer100m <- 155529.0
# Calculate
dataDEI <- data.frame(dataCR[1:2]*mergedPosteriorRandomFA1D$aqua*fishMassPer100m*10^-3,
dataCR[3:4]*mergedPosteriorRandomFA1D$cricket*fishMassPer100m*10^-3)
tableDEI <- sapply(dataDEI, function(x) {
n <- length(x)
mean_x <- mean(x)
se_x <- sd(x) / sqrt(n)  # 標準誤差
error_margin <- qt(0.975, df = n - 1) * se_x  # 信頼区間の幅
c(mean = mean_x,
lower = mean_x - error_margin,
upper = mean_x + error_margin)
})
colnames(tableDEI) <- c("Aquatic insects (T1)",
"Aquatic insects (T2)",
"Cricket (T1)",
"Cricket (T2)")
tableDEI <- data.frame(
order = colnames(tableDEI),
t(tableDEI)
)
tableDEI
### Figure ###
col3 <- c("#385686","#385686","#bd934f","#bd934f")
p.D <- ggplot(tableDEI, aes(x = mean, y = order, colour = order)) +
geom_point(size = 1) +
geom_errorbar(aes(xmin = lower, xmax = upper), width = 0.2) +
theme_light() +
theme(panel.grid=element_blank(),
text = element_text(size = 15),
axis.text.y = element_blank(),
legend.position = "none") +
labs(title = "D",
x = "daily EPA intake",
y = "") +
scale_y_discrete(limits=c("Aquatic insects (T2)",
"Aquatic insects (T1)",
"Cricket (T2)",
"Cricket (T1)")) +
scale_color_manual(values = col3)
p.D
# Data set
dataWeightAll <- read.csv("SourceData_BodyMass.csv", header = T)
dataWeightAll$order <- str_to_sentence(dataWeightAll$order)
dataWeightAll$order
# Parameters
randomDraws <- 1000
idOrder <- unique(dataEpaAqua$order)
dataWeightAll %>% filter(order %in% c(idOrder))
dataWeightAll <- dataWeightAll %>% filter(order %in% c(idOrder))
write.csv(dataWeightAll,"SourceData_BodyMass_.csv",row.names = F)
# Data set
dataWeightAll <- read.csv("SourceData_BodyMass.csv", header = T)
dataWeightAll$order <- str_to_sentence(dataWeightAll$order)
dataWeightAll <- dataWeightAll %>% filter(order %in% c(idOrder,"Rhaphidophoridae"))
dataWeightAll
# Data set
dataWeightAll <- read.csv("SourceData_BodyMass.csv", header = T)
dataWeightAll$order <- str_to_sentence(dataWeightAll$order)
dataWeightAll %>% filter(order %in% c(idOrder), family %in% c("Rhaphidophoridae"))
dataWeightAll %>% filter(order %in% c(idOrder) & family %in% c("Rhaphidophoridae"))
dataWeightAll %>% filter(order %in% c(idOrder) | family %in% c("Rhaphidophoridae"))
dataWeightAll <- dataWeightAll %>% filter(order %in% c(idOrder) | family %in% c("Rhaphidophoridae"))
View(dataWeightAll)
write.csv(dataWeightAll,"SourceData_BodyMass_.csv",row.names = F)
# Data set
dataWeightAll <- read.csv("SourceData_BodyMass.csv", header = T)
dataWeightAll$order <- str_to_sentence(dataWeightAll$order)
# Parameters
randomDraws <- 1000
idOrder <- unique(dataEpaAqua$order)
# Objects
posteriorWeightAqua <- list()
posteriorRandomWeightAqua <- list()
# Start
for (i in 1:length(idOrder)) {
dataW <- dataWeightAll %>% filter(order %in% c(idOrder[i]))
print(idOrder[i])
## weight per insect
# Data frame
dataWeight <- data.frame(
weight_mean = mean(dataW$mass..mg.),  # 1匹あたりの体重 (g)
weight_sd = sd(dataW$mass..mg.),   # 1匹あたりの体重のSD
weight_n = nrow(dataW)         # サンプルサイズ (1匹あたり体重)
)
# 1匹あたり体重の標準誤差（SE）を計算
dataWeight$weight_se <- dataWeight$weight_sd / sqrt(dataWeight$weight_n)
# Prior
mu_prior <- mean(dataW$mass..mg.)
sigma_prior <- sd(dataW$mass..mg.)
# ベイズモデルの定義
modelWeightAqua <- brm(
weight_mean | se(weight_se) ~ 1,
data = dataWeight,
family = gaussian(),
prior = prior_string(paste0("normal(", mu_prior, ",", sigma_prior,")"), class = "Intercept"),
iter = 10000, warmup = 2000, chains = 4, cores = 4, seed = 123,
control = list(adapt_delta = 0.999, max_treedepth = 15)
)
# 統合推定値の抽出
posteriorWeight <- as_draws_df(modelWeightAqua)$b_Intercept
## 統合推定値の保存
posteriorWeightAqua[[i]] <- data.frame(
post.weight_per_weight = posteriorWeight,
order = rep(idOrder[i],length(8000*4))
)
# 事後分布からX回のランダムサンプリング
posteriorRandomWeight <- sample(posteriorWeight, randomDraws)
posteriorRandomWeightAqua[[i]] <- data.frame(
random.weight_per_weight = posteriorRandomWeight,
order = rep(idOrder[i],length(randomDraws))
)
}
